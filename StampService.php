<?php
// if(isset($this->soapClient)) {
// } else {
//     throw new Exception("SOAP CLIENT NOT INITIALIZED!");
// } 
require_once PATH_MODELS.'/Account.php';
require_once PATH_ROOT.'Util.php';

/**
 * Stamps API service
 */
class StampService {

    /**
     * URL for Stamps API
     */
    private const URL = "https://swsim.testing.stamps.com/swsim/swsimv90.asmx?wsdl";

    /**
     * Soap client for Stamps.com API
     *
     * @var [SoapClient]
     */
    private $soapClient;

    /**
     * Authenticator string to be used for api calls, Generated by authenticateUser()
     *
     * @var [string]
     */
    private $authenticator;

    public function __construct() {
        $this->soapClient = new SoapClient(StampService::URL);
        $this->authenticateUser();
        //$this->purchasePostage(10.00);
    }
    
    /**
     * Authenticates the user and generates an authenticator string to be used for API calls.
     * This is called upon construction of the class.
     */
    private function authenticateUser(){
        if(isset($this->soapClient)) {
            try {
                // Create new Credentials Object
                $credentials = new Credentials();
                
                $response = $this->soapClient->AuthenticateUser(array("Credentials"=>(array) $credentials));
                if (isset($response->Authenticator)) {
                    // Save authenticator
                    $this->authenticator = $response->Authenticator;
                    _log(LOG_INFO, "Authentication Successful");
                    _log(LOG_INFO, $this->authenticator);
                } else {
                    _log(LOG_ERR, "Authentication Error. Authenticator not set.");
                }
                
            } catch (Exception $e) {
                _log(LOG_ERR, $e->getMessage());
                throw $e;
            }
        } else {
            throw new Exception("SOAP CLIENT NOT INITIALIZED!");
        }
    }

    /**
     * Gets the account information from Stamps.com
     * Used to get information like balance left, maximum postage balance, etc.
     *
     * @return GetAccountInfoResponse - [https://developer.stamps.com/developer/docs/swsimv90.html#getaccountinfo-object]
     */
    private function getAccountInfo() {
        if(isset($this->soapClient)) {
            try {
                if (!isset($this->authenticator)) {
                    throw new Exception("Authenticator not set!");
                }
                
                $response = $this->soapClient->GetAccountInfo(array('Authenticator'=>$this->authenticator));

                if (isset($response->AccountInfo)) {
                    _log(LOG_INFO, "GetAccountInfo Successful");
                    $this->authenticator = $response->Authenticator;
                    return $response;
                } else {
                    _log(LOG_ERR, "Get Account Info Error. AccountInfo not set.");
                    return NULL;
                }
            } catch (Exception $e) {
                _log(LOG_ERR, $e->getMessage());
                throw $e;
            }
        } else {
            throw new Exception("SOAP CLIENT NOT INITIALIZED!");
        }
    }

    /**
     * Purchase a specified amount for postage
     *
     * @param float $amount - Amount to purchase
     * @return bool - If purchase is successful or not.
     */
    private function purchasePostage(float $amount){
        if(isset($this->soapClient)) {
            try {
                if(!isset($amount)) {
                    throw new InvalidArgumentException('Amount is required');
                }

                // Get current account information
                $currentAccountInfo = $this->getAccountInfo();

                if(isset($currentAccountInfo)) {
                    // Get control total, required by purchase postage
                    $control_total = $currentAccountInfo->AccountInfo->PostageBalance->ControlTotal;

                    _log(LOG_INFO, "Purchase Postage: Current control total = " . $control_total);

                    $response = $this->soapClient->PurchasePostage(array("Authenticator"=>$this->authenticator,
                                                                        "PurchaseAmount"=>$amount,
                                                                        "ControlTotal"=> $control_total));
                    if (isset($response->PurchaseStatus) && $response->PurchaseStatus == "Success") {
                        _log(LOG_INFO, "Purchase Postage: Success");
                        _log(LOG_INFO, "Purchase Postage: Transaction ID #" . $response->TransactionID);
                        _log(LOG_INFO, "Purchase Postage: New control total = " . $response->PostageBalance->ControlTotal);

                        $this->authenticator = $response->Authenticator;

                        return TRUE;
                    } else {
                        _log(LOG_ERR,'Purchase Postage Failed!');
                        return FALSE;
                    }
                }
            } catch (Exception $e) {
                _log(LOG_ERR, $e->getMessage());
                throw $e;
            }
        } else {
            throw new Exception("SOAP CLIENT NOT INITIALIZED!");
        } 
    }


    


}
?>

